#include"workerManager.h"

WorekerManager::WorekerManager()
{
	//1.文件不存在
	ifstream ifs;
	ifs.open(FILENAME, ios::in);
	if (!ifs.is_open())
	{
		cout << "文件不存在" << endl;
		//初始化属性
		this->m_EmpNum = 0;
		this->m_EmpArray = NULL;
		this->m_FileIsEmpty = true;
		ifs.close();
		return;
	}
	
	//2.文件存在 数据为空
	char ch;
	ifs >> ch;
	if (ifs.eof())//eof:文件尾
	{
		cout << "文件为空!" << endl;
		//初始化属性
		this->m_EmpNum = 0;
		this->m_EmpArray = NULL;
		this->m_FileIsEmpty = true;
		ifs.close();
		return;
	}

	//3.文件存在且不为空
	int num = this->get_EmpNum();
	cout << "职工人数为： " << num << endl;
	this->m_EmpNum = num;

	this->m_EmpArray = new Worker * [this->m_EmpNum];//开辟空间
	this->init_Emp();//将文件中的数据存到数组中

	/*for (int i = 0; i < this->m_EmpNum; i++)
	{
		cout << "职工编号： " << this->m_EmpArray[i]->m_Id << " "
			<< "职工姓名： " << this->m_EmpArray[i]->m_Name << " "
			<< "职工部门编号： " << this->m_EmpArray[i]->m_DeptId << endl;


	}*/


}

void WorekerManager::show_Menu()//展示菜单
{
	cout << "************************************************" << endl;
	cout << "************** 欢迎使用职工管理系统! ***********" << endl;
	cout << "***************** 0.退出管理程序 ***************" << endl;
	cout << "***************** 1.增加职工信息 ***************" << endl;
	cout << "***************** 2.显示职工信息 ***************" << endl;
	cout << "***************** 3.删除离职职工 ***************" << endl;
	cout << "***************** 4.修改职工信息 ***************" << endl;
	cout << "***************** 5.查找职工信息 ***************" << endl;
	cout << "***************** 6.按照编号排序 ***************" << endl;
	cout << "***************** 7.清空所有文档 ***************" << endl;
	cout << "************************************************" << endl;
	cout << endl;


}

void WorekerManager::ExitSystem()//退出系统
{
	cout << "欢迎下次使用" << endl;
	system("pause");
	exit(0);//退出程序

}

void WorekerManager::Add_Emp()
{
	cout << "请输入添加的职工的数量： " << endl;

	int addNum = 0;//保存用户的输入数量

	cin >> addNum;

	if (addNum > 0)
	{
		//添加
		//计算添加新空间大小
		int newSize = this->m_EmpNum + addNum;//新空间大小=原来记录人数+新增人数

		//开辟新空间
		Worker** newSpace = new Worker * [newSize];

		//将原来空间的数据拷贝到新空间下
		if (this->m_EmpArray != NULL)
		{
			for (int i = 0; i < this->m_EmpNum; i++)
			{
				newSpace[i] = this->m_EmpArray[i];

			}
		}

		//批量添加新数据
		for (int i = 0; i < addNum; i++)
		{
			int id;//职工编号
			string name;//职工姓名
			int dSelect;//部门选择

			cout << "请输入第 " << i + 1 << " 个新职工编号" << endl;
			cin >> id;
			cout << "请输入第 " << i + 1 << " 个新职工姓名" << endl;
			cin >> name;
			cout << "请选择该职工岗位 " <<endl;
			cout << "1、普通职工" << endl;
			cout << "2、经理" << endl;
			cout << "3、老板" << endl;
			cin >> dSelect;

			Worker* worker = NULL;
			switch (dSelect)
			{
			case1:
				worker = new Employee(id, name, 1);
				break;
			case2:
				worker = new Manager(id, name, 2);
				break;
			case3:
				worker = new Boss(id, name, 3);
				break;
			default:
				break;
			}

			//将创建的职工指针保存到数组中
			newSpace [this->m_EmpNum + i] = worker;

		}

		//释放原有空间
		delete[]this->m_EmpArray;

		//更改新空间指向
		this->m_EmpArray = newSpace;

		//更新新的职工人数
		this->m_EmpNum = newSize;

		//更新职工不为空标志
		this->m_FileIsEmpty = false;


		//提示添加成功
		cout << "成功添加" << addNum << "名新职工" << endl;

		//保存数据到文件中
		this->save();

	}
	else
	{
		cout << "输入数据有误" << endl;
	}

	//按任意键后，清屏回到上级目录
	system("pause");
	system("cls");


}

void WorekerManager::save()//保存文件
{
	ofstream ofs;
	ofs.open(FILENAME, ios::out);//输出的方式打开文件――写文件

	//将每个人的数据写入文件中
	for (int i = 0; i < this->m_EmpNum; i++)
	{

		ofs << this->m_EmpArray[i]->m_Id << " "
			<< this->m_EmpArray[i]->m_Name << " "
			<< this->m_EmpArray[i]->m_DeptId << endl;
	}


	//关闭文件
	ofs.close();

}

int WorekerManager::get_EmpNum()//统计文件中人数
{
	ifstream ifs;
	ifs.open(FILENAME, ios::in);//打开文件

	int id;
	string name;
	int dId;
	int num = 0;
	while (ifs>>id && ifs>>name && ifs>>dId)
	{
		//统计人数变量
		num++;
	}

	return num;

}

void WorekerManager::init_Emp()//初始化员工
{
	ifstream ifs;
	ifs.open(FILENAME, ios::in);

	int id;
	string name;
	int dId;

	int index = 0;
	while (ifs >> id && ifs >> name && ifs >> dId)
	{
		Worker* worker = NULL;
		if (dId == 1)//普通职工
		{
			worker = new Employee(id, name, dId);
		}
		else if (dId == 2)//经理
		{
			worker = new Manager(id, name, dId);
		}
		else//老板
		{
			worker = new Boss(id, name, dId);
		}
		this->m_EmpArray[index] = worker;
		index++;
	}

	ifs.close();
}

void WorekerManager::Show_Emp()//显示职工
{
	//判断文件是否为空
	if (this->m_FileIsEmpty)
	{
		cout << "文件不存在或者记录为空！" << endl;

	}
	else
	{
		for (int i = 0; i < m_EmpNum; i++)
		{
			//利用多态调用程序接口
			this->m_EmpArray[i]->showInfo();

		}
	}

	system("pause");
	system("cls");
}

void WorekerManager::Del_Emp()//删除职工
{
	if (this->m_FileIsEmpty)
	{
		cout << "文件不存在或者记录为空！" << endl;
	}
	else
	{
		//按照职工编号删除
		cout << "请输入想要删除职工编号： " << endl;
		int id=0;
		cin >> id;

		int index=this->IsExist(id);

		if (index != -1)//说明职工存在并且要删除掉index位置上的职工
		{
			for (int i = index;i<this->m_EmpNum-1;i++)
			{
				//数据前移
				this->m_EmpArray[i] = this->m_EmpArray[i + 1];
			}
			this->m_EmpNum--;//更新数组中记录人员的个数
			//数据同步到文件中
			this->save();

			cout << "删除成功！" << endl;

		}
		else
		{
			cout << "删除失败，未找到该职工！" << endl;
		}
	}

	//按任意键 清屏
	system("pause");
	system("cls");


}

int WorekerManager::IsExist(int id)//判断职工是否存在
{
	int index = -1;
	for (int i = 0; i < this->m_EmpNum; i++)
	{
		if (this->m_EmpArray[i]->m_Id == id)
		{
			//找到职工
			index = i;

			break;

		}

	}
	return index;
}

void WorekerManager::Mod_Emp()//修改职工
{
	if (this->m_FileIsEmpty)
	{
		cout << "文件为空或者记录为空" << endl;
	}
	else
	{
		cout << "请输入修改的职工编号" << endl;
		int id = 0;
		cin >> id;
		int ret=this->IsExist(id);
		if (ret != -1)
		{
			delete this->m_EmpArray[ret];

			int newId = 0;
			string newName = "";
			int dSelect = 0;

			cout << "查到：" << id << "号职工，请输入新的职工号： " << endl;
			cin >> newId;

			cout << "请输入新的姓名： " << endl;
			cin >> newName;

			cout << "请输入新的岗位： " << endl;
			cout << "1、普通职工" << endl;
			cout << "2、经理" << endl;
			cout << "3、老板" << endl;
			cin >> dSelect;

			Worker* worker = NULL;
			switch (dSelect)
			{
			case 1:
				worker = new Employee(newId, newName, dSelect);
				break;
			case 2:
				worker = new Manager(newId, newName, dSelect);
				break;
			case 3:
				worker = new Boss(newId, newName, dSelect);
				break;
			default:
				break;
			}

			//更新数据
			this->m_EmpArray[ret] = worker;

			cout << "修改成功！" << endl;

			//保存到文件中
			this->save();


		}
		else
		{
			cout << "修改失败，查无此人！" << endl;
		}



	}

	system("pause");
	system("cls");



}

void WorekerManager::Find_Emp()//查找职工
{
	if (this->m_FileIsEmpty)
	{
		cout << "文件不存在或记录为空！" << endl;
	}
	else
	{
		cout << "请输入查找的方式：" << endl;
		cout << "1、按职工编号查找 " << endl;
		cout << "2、按职工姓名查找 " << endl;

		int select = 0;
		cin >> select;

		if (select == 1)
		{
			//按职工编号查找
			int id;
			cout << "请输入查找的职工编号：" << endl;
			cin >> id;

			int ret=IsExist(id);
			if (ret != -1)
			{
				cout << "查找成功！该职工信息如下：" << endl;
				this->m_EmpArray[ret]->showInfo();
			}
			else
			{
				cout << "查找失败，查无此人！" << endl;
			}
		}
		else if(select==2)
		{
			//按职工姓名查找
			string name;
			cout << "请输入查找职工姓名：" << endl;
			cin >> name;

			bool flag = false;//默认为找到职工

			for (int i = 0; i < m_EmpNum; i++)
			{
				if (this->m_EmpArray[i]->m_Name == name)
				{
					cout << "查找成功，职工编号为： " << this->m_EmpArray[i]->m_Id << "号职工信息如下：" << endl;

					flag = true;

					this->m_EmpArray[i]->showInfo();

				}

			}
			if (flag == false)
			{
				cout << "查找失败，查无此人！" << endl;
			}

		}
		else
		{
			cout << "输入选项有误，请重新输入！" << endl;
		}
	}
	system("pause");
	system("cls");
}

void WorekerManager::Sort_Emp()//按照职工编号排序
{
	if (this->m_FileIsEmpty)
	{
		cout << "文件不存在或记录为空！" << endl;
		system("pause");
		system("cls");
	}
	else
	{
		cout << "请选择排序方式：" << endl;
		cout << "1、升序" << endl;
		cout << "2、降序" << endl;

		int select=0;
		cin >> select;
		for (int i = 0; i < m_EmpNum; i++)
		{
			int MinOrMax = i;//声明最小值或最大值的下标
			for (int j = i + 1; j < this->m_EmpNum; j++)
			{
				if (select == 1)
				{
					if (this->m_EmpArray[MinOrMax]->m_Id > this->m_EmpArray[j]->m_Id)
					{
						MinOrMax = j;
					}
				}
				else
				{
					if (this->m_EmpArray[MinOrMax]->m_Id < this->m_EmpArray[j]->m_Id)
					{
						MinOrMax = j;
					}

				}

			}

			if (i != MinOrMax)
			{
				Worker* temp = this->m_EmpArray[i];
				this->m_EmpArray[i] = this->m_EmpArray[MinOrMax];
				this->m_EmpArray[MinOrMax] = temp;

			}
		}
	}

	cout << "排序成功！排序后结果为： " << endl;
	this->save();//排序后结果保存到文件中
	this->Show_Emp();//展示所有职工

}

void WorekerManager::Clean_File()//清空文件
{
	cout << "确定清空？" << endl;
	cout << "1、确定" << endl;
	cout << "2、返回" << endl;

	int select;
	cin >> select;

	if (select == 1)
	{
		ofstream ofs(FILENAME, ios::trunc);//删除后再创建
		ofs.close();

		if (this->m_EmpArray != NULL)
		{

			//删除堆区每个职工对象
			for (int i = 0; i < this->m_EmpNum; i++)
			{
				delete this->m_EmpArray[i];
				this->m_EmpArray[i] = NULL;
			}

			//删除堆区数组指针
			delete[] this->m_EmpArray;
			this->m_EmpArray = NULL;
			this->m_EmpNum = 0;
			this->m_FileIsEmpty = true;

		}

		cout << "清空成功！" << endl;
		
	}

	system("pause");
	system("cls");

}


WorekerManager::~WorekerManager()
{
	if (this->m_EmpArray != NULL)
	{
		delete[] this->m_EmpArray;
		this->m_EmpArray = NULL;
	}
}